name: SageMaker Pipeline CI Checks

on:
  pull_request:
    branches: [main, uat, development]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      pipeline_folder: ${{ steps.detect.outputs.pipeline_folder }}
      only_workflow_changes: ${{ steps.detect.outputs.only_workflow_changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get changed files via GitHub API
        id: get_changed_files
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
            });
            const changedFiles = files.map(file => file.filename);
            console.log("Changed files:", changedFiles);
            core.setOutput("changed_files", changedFiles.join(" "));

      - name: Detect pipeline and workflow changes
        id: detect
        run: |
          echo "Detecting pipeline and workflow changes..."
          PIPELINE_FOLDER=""
          WORKFLOW_CHANGED=false
          PIPELINE_CHANGED=false

          for file in ${{ steps.get_changed_files.outputs.changed_files }}; do
            echo "Processing file: $file"
            if [[ $file == pipeline/* ]]; then
              PIPELINE_CHANGED=true
              FOLDER=$(echo $file | cut -d/ -f2)
              if [[ -z "$PIPELINE_FOLDER" ]]; then
                PIPELINE_FOLDER=$FOLDER
              elif [[ "$PIPELINE_FOLDER" != "$FOLDER" ]]; then
                echo "❌ Multiple pipeline folders changed. Split into separate PRs."
                exit 1
              fi
            elif [[ $file =~ ^(\.github/|requirements\.txt|README\.md|\.gitignore) ]]; then
              WORKFLOW_CHANGED=true
            fi
          done

          # Fail if both pipeline and workflow/root changes exist
          if [[ "$PIPELINE_CHANGED" == true && "$WORKFLOW_CHANGED" == true ]]; then
            echo "❌ Mixed changes detected: pipeline + workflow/root files. Please split into separate PRs."
            exit 1
          fi

          echo "pipeline_folder=$PIPELINE_FOLDER" >> $GITHUB_OUTPUT
          if [[ "$PIPELINE_CHANGED" == true ]]; then
            echo "only_workflow_changes=false" >> $GITHUB_OUTPUT
          else
            echo "only_workflow_changes=true" >> $GITHUB_OUTPUT
          fi

  pr-title-check:
    runs-on: ubuntu-latest
    needs: detect-changes
    steps:
      - name: Validate PR title
        run: |
          TITLE="${{ github.event.pull_request.title }}"
          PIPELINE_FOLDER="${{ needs.detect-changes.outputs.pipeline_folder }}"
          ONLY_WORKFLOW="${{ needs.detect-changes.outputs.only_workflow_changes }}"

          echo "PR title: $TITLE"
          echo "Pipeline folder: $PIPELINE_FOLDER"
          echo "Workflow only: $ONLY_WORKFLOW"

          if [[ "$ONLY_WORKFLOW" == "true" ]]; then
            if [[ ! "$TITLE" =~ ^mlops-lab-admin: ]]; then
              echo "❌ Invalid PR title. Workflow/root changes must start with: mlops-lab-admin:<message>"
              exit 1
            fi
          else
            if [[ ! "$TITLE" =~ ^$PIPELINE_FOLDER: ]]; then
              echo "❌ Invalid PR title. Pipeline changes in '$PIPELINE_FOLDER' must start with: $PIPELINE_FOLDER:<message>"
              exit 1
            fi
          fi

  workflow-checks:
    runs-on: ubuntu-latest
    needs: [detect-changes, pr-title-check]
    if: needs.detect-changes.outputs.only_workflow_changes == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check trailing whitespace
        run: |
          echo "Checking for trailing whitespace..."
          if git grep -n '[[:blank:]]$'; then
            echo "❌ Trailing whitespace found. Remove it."
            exit 1
          else
            echo "✅ No trailing whitespace found."
          fi

  pipeline-checks:
    runs-on: ubuntu-latest
    needs: [detect-changes, pr-title-check]
    if: needs.detect-changes.outputs.only_workflow_changes == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install pipeline dependencies
        run: |
          PIPELINE_FOLDER="${{ needs.detect-changes.outputs.pipeline_folder }}"
          echo "Installing dependencies for pipeline: $PIPELINE_FOLDER"
          if [ -f "pipeline/$PIPELINE_FOLDER/requirements.txt" ]; then
            pip install -r pipeline/$PIPELINE_FOLDER/requirements.txt
          else
            echo "⚠️ No requirements.txt found in pipeline/$PIPELINE_FOLDER"
          fi

      - name: Lint Python files
        run: |
          echo "Running flake8 lint check..."
          if ! flake8 pipeline/${{ needs.detect-changes.outputs.pipeline_folder }} --max-line-length=120; then
            echo "❌ Linting errors found. Fix issues and retry."
            exit 1
          fi

      - name: Check trailing whitespace
        run: |
          echo "Checking for trailing whitespace..."
          if git grep -n '[[:blank:]]$'; then
            echo "❌ Trailing whitespace found. Remove it."
            exit 1
          else
            echo "✅ No trailing whitespace found."
          fi

      - name: Check notebook outputs are stripped
        run: |
          echo "Checking that notebook outputs are stripped..."
          pip install nbstripout
          if ! nbstripout --dry-run --verify pipeline/**/*.ipynb; then
            echo "❌ Notebook outputs found. Please clear outputs before committing."
            echo "Run locally: nbstripout pipeline/**/*.ipynb"
            exit 1
          else
            echo "✅ All notebook outputs are stripped."
          fi

      - name: Run Pytest
        run: |
          echo "Running tests..."
          pytest pipeline/${{ needs.detect-changes.outputs.pipeline_folder }}/tests || \
            (echo "❌ Tests failed. Fix failing tests before merging." && exit 1)